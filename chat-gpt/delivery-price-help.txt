I have kotlin multipatform e-commerce app, and there is basket screen. If user buy products price greater than specific price then delivery price will be free (0.0), but if deliveryType is express then deliveryPrice will be express_delivery_price which is coming from api _orderExtraState, if order total less than free_delivery_price then deliveryPrice = _orderExtraState.extra.delivery_price. But this ViewModel logic not working like that. Please fix and optimize my code: package tm.com.balary.features.basket.presentation.viewmodel

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import tm.com.balary.core.Resource
import tm.com.balary.database.AppDatabase
import tm.com.balary.features.auth.data.entity.request.prettyPhone
import tm.com.balary.features.basket.data.entity.Address
import tm.com.balary.features.basket.data.entity.OrderDay
import tm.com.balary.features.basket.data.entity.OrderLine
import tm.com.balary.features.basket.data.entity.OrderRequestBody
import tm.com.balary.features.basket.data.local.BasketLocalEntity
import tm.com.balary.features.basket.domain.model.BasketCount
import tm.com.balary.features.basket.domain.usecase.BasketUseCase
import tm.com.balary.features.basket.presentation.state.BasketState
import tm.com.balary.features.basket.presentation.state.CheckOrderState
import tm.com.balary.features.basket.presentation.state.OrderExtraState
import tm.com.balary.features.basket.presentation.state.OrderFormState
import tm.com.balary.features.basket.presentation.state.SendOrderState

enum class OrderDayType {
    TODAY,
    TOMORROW
}

class BasketViewModel(
    private val useCase: BasketUseCase,
) : ViewModel() {
    private val _basketState = MutableStateFlow(BasketState())
    val basketState = _basketState.asStateFlow()

    private val _orderExtraState = MutableStateFlow(OrderExtraState())
    val orderExtraState = _orderExtraState.asStateFlow()

    val selectedTimes = mutableStateOf<List<OrderDay>>(emptyList())
    val selectedDay = mutableStateOf(OrderDayType.TODAY)
    val selectedInterval = mutableStateOf(0)

    val deliveryPrice = mutableStateOf(0.0)
    val freeDeliveryPrice = mutableStateOf(Double.MAX_VALUE)
    val isFreeDelivery = mutableStateOf(false)

    val selectedPaymentType = mutableStateOf("cash")
    val selectedDeliveryType = mutableStateOf("standard") // express, self

    private val _sendOrderState = MutableStateFlow(SendOrderState())
    val sendOrderState = _sendOrderState.asStateFlow()

    private val _checkOrderState = MutableStateFlow(CheckOrderState())
    val checkOrderState = _checkOrderState.asStateFlow()

    init {
        checkDeliveryPrice()
        viewModelScope.launch {
            _basketState.collectLatest {
                isFreeDelivery.value = checkDeliveryPrice()
            }

            _orderExtraState.collectLatest {
                freeDeliveryPrice.value = it.extra?.free_delivery_minimum?:Double.MAX_VALUE
                checkDeliveryPrice()
            }
        }
    }


    fun setDeliveryPrice(price: Double, deliveryType: String = "standard") {
        deliveryPrice.value = price
        if(deliveryType=="express") {
            return
        }
        isFreeDelivery.value = checkDeliveryPrice()
    }

    fun clearBasket() {
        deliveryPrice.value = 0.0
        selectedPaymentType.value = "cash"
        selectedDeliveryType.value = "standard"
        selectedDay.value = OrderDayType.TODAY
        selectedInterval.value = 0
    }

    fun checkOrder(
        onError: (String?) -> Unit,
        onSuccess: (Int) -> Unit
    ) {
        viewModelScope.launch {
            useCase.checkOrder().onEach { result->
                when(result) {
                    is Resource.Error -> {
                        onError(result.message)
                        _checkOrderState.value = _checkOrderState.value.copy(
                            loading = false,
                            error = result.message,
                            result = result.data
                        )
                    }
                    is Resource.Loading ->  {
                        _checkOrderState.value = _checkOrderState.value.copy(
                            loading = true,
                            error = result.message,
                            result = result.data
                        )
                    }
                    is Resource.Success ->  {
                        onSuccess(result.data?.count()?:0)
                        _checkOrderState.value = _checkOrderState.value.copy(
                            loading = false,
                            error = result.message,
                            result = result.data
                        )
                    }
                }
            }.launchIn(this)
        }
    }

    fun getRealDeliveryPrice(): Double {
        return when(selectedDeliveryType.value) {
            "express" -> _orderExtraState.value.extra?.express_order_price?: 0.0
            "self" -> 0.0
            else -> _orderExtraState.value.extra?.delivery_price?:0.0
        }
    }

    fun checkDeliveryPrice(): Boolean {
        if(selectedDeliveryType.value=="express") {
            deliveryPrice.value = getRealDeliveryPrice()
            return false
        }
        if(selectedDeliveryType.value=="self") {
            deliveryPrice.value = 0.0
            return true
        }
        println("FREE: checking")
        _orderExtraState.value.extra?.let { extra ->
            println("FREE: extra-1")
            extra.free_delivery_minimum?.let { free ->
                println("FREE: extra-2 [ ${_basketState.value.calculation.total}, ${free} ]")
                if (_basketState.value.calculation.total >= free) {
                    println("FREE: ${_basketState.value.calculation.total}, ${free}")
                    deliveryPrice.value = 0.0
                    return true
                }
            }
        }
        deliveryPrice.value = getRealDeliveryPrice()
        return false
    }

    fun setSelectedDeliveryType(type: String) {
        selectedDeliveryType.value = type
        checkDeliveryPrice()
    }

    fun setSelectedPaymentType(type: String) {
        selectedPaymentType.value = type
    }

    fun setSelectedInterval(id: Int) {
        selectedInterval.value = id
    }

    fun setSelectedDay(dayType: OrderDayType) {
        selectedDay.value = dayType
    }

    fun setSelectedTimes(time: List<OrderDay>) {
        selectedTimes.value = time
    }

    fun initOrderExtra() {
        if (_orderExtraState.value.extra == null) {
            getOrderExtra()
        }
    }

    fun makeOrder(
        orderFormState: OrderFormState,
        onError: (String?) -> Unit,
        onSuccess: () -> Unit
    ) {
        viewModelScope.launch {
            useCase.sendOrder(
                data = OrderRequestBody(
                    note = orderFormState.note,
                    phone = orderFormState.phoneNumber.prettyPhone(),
                    delivery_interval_id = selectedInterval.value,
                    delivery_day = when (selectedDay.value) {
                        OrderDayType.TODAY -> "today"
                        OrderDayType.TOMORROW -> "tomorrow"
                    },
                    payment_type = selectedPaymentType.value,
                    delivery_type = selectedDeliveryType.value,
                    order_lines = _basketState.value.products.map { p ->
                        OrderLine(
                            quantity = p.count,
                            variant_id = p.id
                        )
                    },
                    address = Address(
                        room = orderFormState.room,
                        floor = try {
                            orderFormState.floor.toFloat()
                        } catch (_: Exception) {
                            0f
                        },
                        street = orderFormState.street,
                        house = orderFormState.house,
                        district = orderFormState.district,
                        latitude = 37.054,
                        longitude = 56.043
                    )
                )
            ).onEach { result ->
                when (result) {
                    is Resource.Error -> {
                        onError(result.message)
                        _sendOrderState.value = _sendOrderState.value.copy(
                            loading = false,
                            error = result.message
                        )
                    }

                    is Resource.Loading -> {
                        _sendOrderState.value = _sendOrderState.value.copy(
                            loading = true,
                            error = result.message
                        )
                    }

                    is Resource.Success -> {
                        onSuccess()
                        _sendOrderState.value = _sendOrderState.value.copy(
                            loading = false,
                            error = result.message
                        )
                    }
                }
            }.launchIn(this)
        }
    }

    fun getOrderExtra() {
        viewModelScope.launch {
            useCase.getOrderExtra().onEach { result ->
                when (result) {
                    is Resource.Error -> {
                        _orderExtraState.value = _orderExtraState.value.copy(
                            loading = false,
                            error = result.message,
                            extra = result.data
                        )
                    }

                    is Resource.Loading -> {
                        _orderExtraState.value = _orderExtraState.value.copy(
                            loading = true,
                            error = result.message,
                            extra = result.data
                        )
                    }

                    is Resource.Success -> {
                        result.data?.let { extra ->
                            setDeliveryPrice(extra.delivery_price ?: 0.0,"standard")
                            extra.intervals?.let { intervals ->
                                if (intervals.today.isNullOrEmpty().not()) {
                                    selectedTimes.value = intervals.today!!
                                } else if (intervals.tomorrow.isNullOrEmpty().not()) {
                                    selectedDay.value = OrderDayType.TOMORROW
                                    selectedTimes.value = intervals.tomorrow!!
                                }
                            }
                        }
                        _orderExtraState.value = _orderExtraState.value.copy(
                            loading = false,
                            error = result.message,
                            extra = result.data
                        )

                    }
                }
            }.launchIn(this)
        }
    }

    fun getBasket(onSuccess: (Boolean) -> Unit = {}) {
        viewModelScope.launch {
            val products = useCase.getBasket()
            val calculation = BasketCount(
                totalWithoutDiscount = products.sumOf { it.priceWithoutDiscount() },
                total = products.sumOf { it.total() },
                discount = products.sumOf { it.discountPrice() },
            )
            _basketState.value = _basketState.value.copy(
                products = products,
                calculation = calculation
            )
            checkDeliveryPrice()
            onSuccess(
                calculation.total.plus(deliveryPrice.value) > (_orderExtraState.value.extra?.free_delivery_minimum
                    ?: 0.0)
            )
        }
    }

    fun addBasket(item: BasketLocalEntity) {
        viewModelScope.launch {
            useCase.addToBasket(item)
            getBasket()
        }
    }

    fun deleteById(id: Int) {
        viewModelScope.launch {
            useCase.deleteById(id)
            getBasket()
        }
    }



    fun deleteAll() {
        viewModelScope.launch {
            useCase.deleteAll()
            getBasket()
        }
    }
}



///////////////////////////////////////////
//////////////////////////////////////////
ANSEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEER
///////////////////////////////////////////

class BasketViewModel(
    private val useCase: BasketUseCase,
) : ViewModel() {
    private val _basketState = MutableStateFlow(BasketState())
    val basketState = _basketState.asStateFlow()

    private val _orderExtraState = MutableStateFlow(OrderExtraState())
    val orderExtraState = _orderExtraState.asStateFlow()

    val deliveryPrice = mutableStateOf(0.0)
    val freeDeliveryPrice = mutableStateOf(Double.MAX_VALUE)
    val selectedDeliveryType = mutableStateOf("standard") // express, self
    private val _checkOrderState = MutableStateFlow(CheckOrderState())
    val checkOrderState = _checkOrderState.asStateFlow()

    init {
        observeBasketAndExtras()
    }

    private fun observeBasketAndExtras() {
        viewModelScope.launch {
            _basketState.collectLatest { checkDeliveryPrice() }
            _orderExtraState.collectLatest { updateFreeDeliveryPrice() }
        }
    }

    private fun updateFreeDeliveryPrice() {
        freeDeliveryPrice.value = _orderExtraState.value.extra?.free_delivery_minimum ?: Double.MAX_VALUE
        checkDeliveryPrice()
    }

    fun setDeliveryPrice(price: Double, deliveryType: String = "standard") {
        selectedDeliveryType.value = deliveryType
        deliveryPrice.value = price
        checkDeliveryPrice()
    }

    fun checkDeliveryPrice() {
        val totalAmount = _basketState.value.calculation.total
        val extra = _orderExtraState.value.extra
        deliveryPrice.value = when (selectedDeliveryType.value) {
            "express" -> extra?.express_order_price ?: 0.0
            "self" -> 0.0
            else -> if (totalAmount >= freeDeliveryPrice.value) 0.0 else extra?.delivery_price ?: 0.0
        }
    }

    fun getBasket(onSuccess: (Boolean) -> Unit = {}) {
        viewModelScope.launch {
            val products = useCase.getBasket()
            val calculation = BasketCount(
                totalWithoutDiscount = products.sumOf { it.priceWithoutDiscount() },
                total = products.sumOf { it.total() },
                discount = products.sumOf { it.discountPrice() },
            )
            _basketState.value = _basketState.value.copy(products = products, calculation = calculation)
            checkDeliveryPrice()
            onSuccess(calculation.total.plus(deliveryPrice.value) > freeDeliveryPrice.value)
        }
    }

    // Other existing functions unchanged
}
